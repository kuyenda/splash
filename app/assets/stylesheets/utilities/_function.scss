/*******************************
● 基础函数扩展
*******************************/
@function nth-delete($list, $n) {
    $result: ();
    $n: if($n < 0, length($list) + $n + 1, $n);
    $bracketed: is-bracketed($list);
    $separator: list-separator($list);

    @for $i from 1 through length($list) {
        @if $i !=$n {
            $result: append($result, nth($list, $i));
        }
    }

    @return join((), $result, $separator, $bracketed);
}

/*******************************
● 基础颜色值计算
*******************************/
@function color-invert($color) {
    @if lightness($color)>55% {
        @return rgba(#000, 0.7);
    }

    @else {
        @return #fff;
    }
}

@function findLightColor($color) {
    @if type-of($color)=="color" {
        $l: 96%;

        @if lightness($color)>96% {
            $l: lightness($color);
        }

        @return change-color($color, $lightness: $l);
    }

    @return $background;
}

@function findDarkColor($color) {
    @if type-of($color)=="color" {
        $base-l: 29%;
        $luminance: colorLuminance($color);
        $luminance-delta: 0.53 - $luminance;
        $target-l: round($base-l + $luminance-delta * 53);

        @return change-color($color, $lightness: max($base-l, $target-l));
    }

    @return $text-strong;
}

/*******************************
● 基础动画计算
*******************************/
@function bezier($x1:0, $y1:.75, $x2:0, $y2:1) {
    @return cubic-bezier($x1, $y1, $x2, $y2);
}